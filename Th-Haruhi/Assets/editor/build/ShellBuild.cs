// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using UnityEditor;
using System;
using System.IO;
using UnityEngine;
using UnityEditor.SceneManagement;
using UnityEngine.SceneManagement;
using System.Collections.Generic;

public static class ShellBuild
{
    private static readonly string buidPathIOS;
    private static readonly string buidPathAndroid;
    private static readonly string buidPathWindows;
    private static readonly string buidPathWebGL;

    private static BuildOptions buildOption;
    private static readonly string buildAndroidPass;
    private static readonly string buildAndroidAlias;
    private static readonly string buildAndroidKeyStore;
    private static readonly string buildOutPath;
    private static readonly string buildOutWebGL;
    private static readonly string buildOutWindows;
    public static bool g_bSkipBundle = false;
    public static bool g_bSkipBuildPlayer = false;

    static ShellBuild()
	{
		buildOutPath = PathUtility.ProjectPath + "/build";
        buildOutWindows = buildOutPath + "/standalone";
        buildOutWebGL = buildOutPath + "/web";

        buidPathIOS = buildOutPath + "/ios";
		buidPathAndroid = buildOutPath + "/android";
        buidPathWindows = buildOutWindows + "/TH-Haruhi.exe";
        buidPathWebGL = buildOutWebGL + "/TH-Haruhi";

        buildOption = BuildOptions.None;

		buildAndroidPass = "";
		buildAndroidAlias = "";
		buildAndroidKeyStore = "";

	    
    }

	public static void XSwitchPlatform(BuildTargetGroup targetGroup, BuildTarget buildTarget)
    {
        //ResourceBuildTool.OutputLog("X switch build target from " + EditorUserBuildSettings.activeBuildTarget + " to " + buildTarget);
		if (EditorUserBuildSettings.activeBuildTarget != buildTarget)
		{
			EditorUserBuildSettings.SwitchActiveBuildTarget(targetGroup, buildTarget);
		}
	}
	
	public static void SetAndroidBuildSettings(bool bDebug = false)
    {
        buildOption = BuildOptions.None;
        if (bDebug)
		{
			buildOption |= BuildOptions.Development;
			buildOption |= BuildOptions.AllowDebugging;
			buildOption |= BuildOptions.ConnectWithProfiler;
		}
	    buildOption |= BuildOptions.CompressWithLz4HC;


        PlayerSettings.Android.keystoreName = buildAndroidKeyStore;
		PlayerSettings.Android.keystorePass = buildAndroidPass;
		PlayerSettings.Android.keyaliasName = buildAndroidAlias;
		PlayerSettings.Android.keyaliasPass = buildAndroidPass;
	}

	public static void SetBuildSetting(bool bDebug = false)
    {
        buildOption = BuildOptions.None;
        if (bDebug)
		{
			buildOption |= BuildOptions.Development;
			//buildOption |= BuildOptions.AllowDebugging;
			buildOption |= BuildOptions.ConnectWithProfiler;
		}
	    buildOption |= BuildOptions.CompressWithLz4HC;
    }


    [MenuItem("Haruhi/Build/BuildWindows_Debug", false, 1)]
    public static void BuildWindowsDebug()
    {
        SetBuildSetting(true);
        AssetDatabase.Refresh();
        FastBuild(buidPathWindows, BuildTarget.StandaloneWindows64, BuildTargetGroup.Standalone);
    }

    [MenuItem("Haruhi/Build/BuildWindows_Release", false, 1)]
    public static void BuildWindowsRelease()
    {
        SetBuildSetting(false);
        AssetDatabase.Refresh();
        FastBuild(buidPathWindows, BuildTarget.StandaloneWindows64, BuildTargetGroup.Standalone);
    }

    [MenuItem("Haruhi/Build/BuildWebGL_Release", false, 1)]
    public static void BuildWebGL()
    {
        SetBuildSetting(false);
        AssetDatabase.Refresh();
        FastBuild(buidPathWebGL, BuildTarget.WebGL, BuildTargetGroup.WebGL);
    }


    [MenuItem("Haruhi/Build/BuildWebGL_Debug", false, 1)]
    public static void BuildWebGLDebug()
    {
        SetBuildSetting(true);
        AssetDatabase.Refresh();
        FastBuild(buidPathWebGL, BuildTarget.WebGL, BuildTargetGroup.WebGL);
    }

    /*
    [MenuItem("Haruhi/Build/CommandLineBuildFastIOS", false, 1)]
    public static void CommandLineBuildFast()
    {
        SetBuildSetting();
        FastBuild(buidPathIOS, BuildTarget.iOS, BuildTargetGroup.iOS);
    }

    [MenuItem("Haruhi/Build/CommandLineBuildFastIOSDebug", false, 2)]
    public static void CommandLineBuildFastIOSDebug()
    {
        SetBuildSetting(true); 
        FastBuild(buidPathIOS, BuildTarget.iOS, BuildTargetGroup.iOS);
    }

    [MenuItem("Haruhi/Build/CommandLineBuildFastIOSDebugSkipBundle", false, 3)]
    public static void CommandLineBuildFastIOSDebugSkipBundle()
    {
        g_bSkipBundle = true;
        SetBuildSetting(true);
        FastBuild(buidPathIOS, BuildTarget.iOS, BuildTargetGroup.iOS);
    }


    [MenuItem("Haruhi/Build/CommandLineBuildFastAndroid", false, 21)]
    public static void CommandLineBuildFastAndroid()
    {
        SetAndroidBuildSettings();
        AssetDatabase.Refresh();
        FastBuild(buidPathAndroid, BuildTarget.Android, BuildTargetGroup.Android);
    }

    [MenuItem("Haruhi/Build/CommandLineBuildFastAndroidDebug", false, 22)]
    public static void CommandLineBuildFastAndroidDebug()
    {
        SetAndroidBuildSettings(true);
        AssetDatabase.Refresh();
        FastBuild(buidPathAndroid, BuildTarget.Android, BuildTargetGroup.Android);
    }

    [MenuItem("Haruhi/Build/CommandLineBuildFastAndroidDebugSkipBundle", false, 23)]
    public static void CommandLineBuildFastAndroidDebugSkipBundle()
    {
        g_bSkipBundle = true;
        SetAndroidBuildSettings(true);
        AssetDatabase.Refresh();
        FastBuild(buidPathAndroid, BuildTarget.Android, BuildTargetGroup.Android);
    }

    [MenuItem("Haruhi/Build/BuildAssets IOS", false, 51)]
    public static void BuildAssetsIOS()
    {
        g_bSkipBuildPlayer = true;
        SetBuildSetting(true);
	    AssetDatabase.Refresh();
        FastBuild(buidPathIOS, BuildTarget.iOS, BuildTargetGroup.iOS);
    }

    [MenuItem("Haruhi/Build/BuildAssets Android", false, 52)]
    public static void BuildAssetsAndroid()
    {
        g_bSkipBuildPlayer = true;
        SetAndroidBuildSettings(true);
        AssetDatabase.Refresh();
        FastBuild(buidPathAndroid, BuildTarget.Android, BuildTargetGroup.Android);
    }

    [MenuItem("Haruhi/Build/BuildAssets Windows", false, 53)]
    public static void BuildAssetsWindows()
    {
        g_bSkipBuildPlayer = true;
        SetBuildSetting(true);
        AssetDatabase.Refresh();
        FastBuild(buidPathWindows, BuildTarget.StandaloneWindows, BuildTargetGroup.Standalone);
    }

	[MenuItem("Haruhi/Build/BuildText IOS", false, 71)]
	public static void BuildTextIOS()
	{
		g_bSkipBuildPlayer = true;
		g_bSkipBundle = true;
		SetBuildSetting(true);
		AssetDatabase.Refresh();
		FastBuild(buidPathIOS, BuildTarget.iOS, BuildTargetGroup.iOS);
	}

	[MenuItem("Haruhi/Build/BuildText Android", false, 72)]
	public static void BuildTextAndroid()
	{
		g_bSkipBuildPlayer = true;
		g_bSkipBundle = true;
		SetAndroidBuildSettings(true);
		AssetDatabase.Refresh();
		FastBuild(buidPathAndroid, BuildTarget.Android, BuildTargetGroup.Android);
	}
	
	[MenuItem("Haruhi/Build/BuildText Windows", false, 73)]
	public static void BuildTextWindows()
	{
		g_bSkipBuildPlayer = true;
		g_bSkipBundle = true;
		SetBuildSetting(true);
		AssetDatabase.Refresh();
		FastBuild(buidPathWindows, BuildTarget.sta, BuildTargetGroup.Standalone);
	}

	*/

    private static void FastBuild(string buildPath, BuildTarget target, BuildTargetGroup targetGroup)
	{
		Debug.Log("Version of the unity is: " + Application.unityVersion);
		XSwitchPlatform(targetGroup, target);		
		SetBuildParamFromCommandLineArgs ();

		if (Directory.Exists(buildPath))
			Directory.Delete(buildPath,true);

		if (!Directory.Exists(buildOutPath))
			Directory.CreateDirectory(buildOutPath);

        if (!Directory.Exists(buildOutWebGL))
            Directory.CreateDirectory(buildOutWebGL);

        if (!Directory.Exists(buildOutWindows))
            Directory.CreateDirectory(buildOutWindows);

        var resourceList = ResourceBuildTool.GetBuildResources(PathUtility.FullPathToProjectPath(PathUtility.ResourcesPath));
        BuildGame(buildPath, target, buildOption, resourceList);
    }

    public static void SetBuildParamFromCommandLineArgs()
	{
		string[] args = Environment.GetCommandLineArgs();
		for (int i = 1,j = i + 1; j < args.Length; i++,j++) 
		{
			string key = args[i];
			string value = args[j];

            if (value.StartsWith("-"))
                continue;

            switch (key)
            {
                case "-appName":
                    {
                        value = value.Replace("\"", "");
                        PlayerSettings.productName = value;
                        //ResourceBuildTool.OutputLog("set product name: " + value);
                    }
                    break;
                case "-packageName":
                    {
                        PlayerSettings.applicationIdentifier = value;
                        //ResourceBuildTool.OutputLog("set bundle identifier: " + value);
                    }
                    break;
                case "-targetDevice":
                    {
                        iOSTargetDevice target = (iOSTargetDevice)Enum.Parse(typeof(iOSTargetDevice), value);
                        PlayerSettings.iOS.targetDevice = target;
                        //ResourceBuildTool.OutputLog("set ios target device: iOSTargetDevice." + value);
                    }
                    break;
	            case "-obb":
					{
						PlayerSettings.Android.useAPKExpansionFiles = true;
						//ResourceBuildTool.OutputLog("set android OBB.");
					}
		            break;

            }
		}
	}


    public static List<string> GetScenes()
    {
        var scenes = new List<string> { "Assets/gameStart.unity" };
        return scenes;
    }

    public static void BuildGame(
        string buildPath,
        BuildTarget target,
        BuildOptions options,
        List<string> resourceList,
        bool isClear = false)
    {
        var scenes = GetScenes().ToArray();
        if (isClear)
        {
            EditorAssist.EmptyDirectory(PathUtility.AssetBundlePath);
        }

        //编bundle
        if (!ShellBuild.g_bSkipBundle)
        {
            if (!BuildAsset(target, resourceList))
            {
                Debug.Log("error BuildAsset failed!!!");
                return;
            }
        }


        //编配置表
        ResourcesBuilder.BuildText();
        ResourcesBuilder.CopyImage();

        //编player
        if (!ShellBuild.g_bSkipBuildPlayer)
        {
            //删除除 目录名.manifest以外的所有manifest文件
            EditorAssist.DeleteAllManifestFiles();
            var msgBuild = BuildPipeline.BuildPlayer(scenes, buildPath, target, options);
            EditorAssist.DeleteAllManifestFiles();

        }
    }

    public static bool BuildAsset(BuildTarget target, List<string> resourceList)
    {
        if (resourceList.Count > 0)
            return ResourcesBuilder.Build(PathUtility.AssetBundlePath, target, resourceList);
        return false;
    }
}
